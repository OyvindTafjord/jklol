package jklol.models;

option java_package = "com.jayantkrish.jklol.models";
option java_outer_classname = "VariableProtos";

// Represents a Variable of possibly any type (discrete
// real, etc.). 
message VariableProto {
  enum VariableType {
     UNKNOWN = 0;
     DISCRETE = 1;
     DISCRETE_OBJECT = 2;
  }

  // Mandatory fields for any type of variable.
  optional VariableType type = 1 [default = UNKNOWN];

  // Fields conditionally filled out based on the value
  // of type.
  optional DiscreteVariableProto discrete_variable = 2;
  optional DiscreteObjectVariableProto discrete_object_variable = 3;
}

// A discrete variable, containing a fixed set of values with unique
// indexes.
message DiscreteVariableProto {
  // Name indicating the type of the variable.
  optional string name = 1;

  // List of values, stored as objects serialized using the
  // Java serialization API.
  repeated bytes serialized_value = 2;
}

// A variable tha can take on any object of a selected Java type.
message DiscreteObjectVariableProto {
  // This variable takes as a value any object of the named Java class
  optional string java_class_name = 1;
}

// A mapping from numbers to variables, representing a set of
// variables in a factor or factor graph.
message VariableNumMapProto {
  // The number of each variable.
  repeated int32 num = 1;
  // The variable type for each variable, represented as an index
  // into an independently serialized global mapping of variables 
  // to numbers.
  repeated int32 variable_type_index = 2;
  // The name of each variable.
  repeated string name = 3;
}

// Represents a set of variables that are replicated a number of times
// depending on an input assignment.
message DynamicVariableSetProto {
  optional VariableNumMapProto fixed_variables = 1;

  repeated string plate_name = 2;
  repeated DynamicVariableSetProto plate = 3;
  repeated int32 max_replication = 4;
}

// Represents a pattern that can be matched against a set of variables
// in order to instantiate factors, etc.
message VariablePatternProto {
  enum Type {
    UNKNOWN = 0;
    NAME = 1;
    WRAPPER = 2;
  }

  // Required type information.
  optional Type type = 1;

  // Required if type = NAME
  optional VariableNamePatternProto name_proto = 2;
  // Required if type = WRAPPER
  optional WrapperVariablePatternProto wrapper_proto = 3;
}

message VariableNamePatternProto {
  optional VariableNumMapProto template_variables = 1;
  optional VariableNumMapProto fixed_variables = 2;

  repeated string pattern = 3;
  repeated int32 offset = 4;
}

message WrapperVariablePatternProto {
  optional VariableNumMapProto variables = 1;
}
