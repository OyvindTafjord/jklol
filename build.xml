<?xml version="1.0"?>
<project name="jklol" default="jar">
  <property name="src-dir" location="src" />
  <property name="lib-dir" location="lib" />
  <property name="tst-dir" location="test" />
  <property name="perf-dir" location="performance" />
  <property name="doc-dir" location="javadoc" />
  <!-- locations for natively compiled files -->
  <property name="object-dir" location="obj" />
  <property name="bin-dir" location="bin" />

  <uptodate property="jklol.o.noBuild" targetfile="${object-dir}/jklol.o">
    <srcfiles file="jklol.jar" />
  </uptodate>

  <uptodate property="libraries.o.noBuild" targetfile="${object-dir}/libraries.o">
    <srcfiles dir="lib/" file="*.jar" />
  </uptodate>

  <path id="classpath.base">
    <pathelement location="lib/guava-13.0.1.jar" />
    <pathelement location="lib/gwt-user.jar" />
    <pathelement location="lib/jopt-simple-4.3.jar" />
    <pathelement location="lib/opencsv-2.3.jar" />
    <pathelement location="lib/gwtexporter-2.4.0.jar" />
  </path>
  <path id="classpath.test">
    <pathelement location="/usr/share/java/junit.jar" />
    <pathelement location="build/" />
    <path refid="classpath.base" />
  </path>
  <path id="classpath.gcj">
    <pathelement location="/usr/share/java/junit.jar" />
    <pathelement location="lib/gnu-crypto.jar" />
    <path refid="classpath.base" />
  </path>

  <!-- delete all output from compilation -->

  <target name="clean">
    <delete dir="build" />
    <delete dir="${object-dir}" />
    <delete dir="${bin-dir}" />
    <delete file="jklol.jar" />
    <delete dir="war/WEB-INF/classes" failonerror="false" />
    <delete dir="war/jklol" failonerror="false" />
  </target>
  
  <!-- compilation targets -->
  
  <target name="compile">
    <mkdir dir="build" />
    <javac sourcepath="" srcdir="${src-dir}" destdir="build" debug="on"
           excludes="com/jayantkrish/jklol/gwt/**">
      <classpath refid="classpath.base"/>
    </javac>
  </target>

  <target name="compile-test" depends="compile">
    <mkdir dir="build" />
    <javac srcdir="${tst-dir}" destdir="build" debug="on">
      <classpath refid="classpath.test"/>
    </javac>
    <javac srcdir="${perf-dir}" destdir="build" debug="on">
      <classpath refid="classpath.test"/>
    </javac>
  </target>

  <!-- testing targets -->

  <target name="test" depends="compile-test">
    <junit fork="no" outputtoformatters="false">
      <classpath refid="classpath.test" />
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${tst-dir}" includes="**/*.java">
          <include name="**/*.java" />
          <!-- Tests inherit from these classes, but they are not tests -->
          <exclude name="**/TensorTest.java" />
          <exclude name="**/TensorBuilderTest.java" />
          <exclude name="**/MarginalTestCase.java" />
          <exclude name="**/MaxMarginalTestCase.java" />
          <exclude name="**/InferenceTestCases.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test-small" depends="compile-test">
    <junit fork="no">
      <classpath refid="classpath.test" />
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${tst-dir}" includes="com/jayantkrish/jklol/tensor/*.java">
          <include name="com/jayantkrish/jklol/ccg/CachedSparseTensorTest.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="perf" depends="compile-test">
    <junit fork="no">
      <classpath refid="classpath.test" />
      <formatter type="brief" usefile="false" />
      <test name="com.jayantkrish.jklol.util.SparseOutcomeTablePerformanceTest" />
      <!-- <test name="com.jayantkrish.jklol.inference.JunctionTreePerformanceTest" /> -->
    </junit>
  </target>

  <!-- documentation -->

  <target name="javadoc">
    <mkdir dir="${doc-dir}" />
    <javadoc destdir="${doc-dir}" classpathref="classpath.base">
       <fileset dir="${src-dir}" includes="**/*.java" />
    </javadoc>
  </target>

  <!-- create a jar file -->

  <target name="jar" depends="compile">
    <jar destfile="jklol.jar" basedir="build" />
  </target>

  <!-- targets for compiling jklol to a native application using gcj -->

  <target name="gcj-jklol" depends="jar" unless="jklol.o.noBuild">
    <mkdir dir="${object-dir}" />
    <echo message="Building library jklol.o" />
    <exec executable="gcj">
      <arg value="--classpath" />
      <arg value="${toString:classpath.gcj}" />
      <arg value="-c" />
      <arg value="-g" />
      <arg value="-O" />
      <arg value="-o" />
      <arg value="${object-dir}/jklol.o" />
      <arg value="jklol.jar" />
    </exec>
  </target>

  <target name="gcj-libraries" depends="jar" unless="libraries.o.noBuild">
    <pathconvert property="classpath-space" pathsep=" ">
      <path refid="classpath.gcj" />
    </pathconvert>
    <echo message="Building libraries from: ${classpath-space}" />

    <exec executable="gcj">
      <arg value="-c" />
      <arg value="-g" />
      <arg value="-O" />
      <arg value="-o" />
      <arg value="${object-dir}/libraries.o" />
      <arg line="${classpath-space}" />
    </exec>
  </target>

  <target name="gcj-base" depends="gcj-jklol,gcj-libraries">
    <!-- set up objectfiles.path with the compiled .o files -->
    <path id="objectfiles.classpath">
      <fileset dir="${object-dir}" includes="*.o" />
    </path>

    <pathconvert property="objectfiles.path" pathsep=" ">
      <path refid="objectfiles.classpath" />
    </pathconvert>
  </target>

  <target name="train_ccg" depends="gcj-base">
    <mkdir dir="${bin-dir}" />
    <exec executable="gcj">
      <arg value="--main=com.jayantkrish.jklol.cli.TrainCcg" />
      <arg value="-o" />
      <arg value="${bin-dir}/train_ccg" />
      <arg line="${objectfiles.path}" />
    </exec>
  </target>

  <target name="parse_ccg" depends="gcj-base">
    <mkdir dir="${bin-dir}" />
    <exec executable="gcj">
      <arg value="--main=com.jayantkrish.jklol.cli.ParseCcg" />
      <arg value="-o" />
      <arg value="${bin-dir}/parse_ccg" />
      <arg line="${objectfiles.path}" />
    </exec>
  </target>

  <target name="gcj" depends="train_ccg,parse_ccg"/>

  <!-- Target for compiling jklol to Javascript -->

  <!-- Configure path to GWT SDK -->
  <property name="gwt.sdk" location="gwt_lib" />
  <property name="gwt.args" value="" />

  <path id="project.class.path">
    <pathelement location="war/WEB-INF/classes"/>
    <pathelement location="${gwt.sdk}/gwt-user.jar"/>
    <fileset dir="${gwt.sdk}" includes="gwt-dev*.jar"/>
    <!-- Add any additional non-server libs (such as JUnit) -->
    <fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
  </path>

  <target name="libs" description="Copy libs to WEB-INF/lib">
    <mkdir dir="war/WEB-INF/lib" />
    <copy todir="war/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet.jar" />
    <copy todir="war/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet-deps.jar" />
    <!-- Add any additional server libs that need to be copied -->
    <copy todir="war/WEB-INF/lib" >
        <fileset dir="${lib-dir}" includes="*.jar"/>
    </copy>
  </target>

  <target name="javac" depends="libs" description="Compile java source to bytecode">
    <mkdir dir="war/WEB-INF/classes"/>
    <javac srcdir="${src-dir}" includes="**" encoding="utf-8"
        destdir="war/WEB-INF/classes"
        source="1.5" target="1.5" nowarn="true"
        debug="true" debuglevel="lines,vars,source">
      <classpath refid="project.class.path"/>
    </javac>
    <copy todir="war/WEB-INF/classes">
      <fileset dir="src" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="gwtc" depends="javac" description="GWT compile to JavaScript (production mode)">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <pathelement location="${src-dir}"/>
	<pathelement location="${lib-dir}"/>
        <path refid="project.class.path"/>
      </classpath>
      <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
      <jvmarg value="-Xmx256M"/>
      <arg line="-war"/>
      <arg value="war"/>
      <arg line="-style"/>
      <arg value="PRETTY"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="${gwt.args}"/>
      <arg value="com.jayantkrish.jklol.jklol"/>
    </java>
  </target>

</project>
